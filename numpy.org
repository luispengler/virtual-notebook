#+TITLE: NumPy - Learning some basics
#+DESCRIPTION: NumPy - Learning some basics
#+SETUPFILE: https://luispengler.github.io/site/org-html-themes/org/theme-readtheorg.setup
#+OPTIONS: num:nil ^:{} toc:1

* Introduction
So, my mentor gave me my first task to learn some stuff around NumPy, Panda, and Scikit-Learn until Sunday (today is Thursday).
+ My mentor is [[https://scholar.google.com/citations?user=cHCDiIYAAAAJ][Dr. Abhijit Sen]], and we are starting research through the project [[https://www.ndeavours.org/][Ndeavours]]
+ Keep tuned for updates into what we are doing - I don't know yet because we just started, but it will have something to do with AI.

* What is NumPy?
+ A multi-dimensional array library, meaning you can use it to store all sorts of data, in 1D arrays up to 3D arrays (I guess you could go more, but I don't know if it's true)
** NumPy vs Lists
+ Lists are slow and NumPy fast
+ NumPy uses Fixed Type -> it stores all data into a 32 bit memory (int32), and you can specify other bit values for saving (int16, int8 for example)
+ Lists uses a built-in inttype for python that contains four different things (object value, object type, reference count, and size)
*** Representing 5
+ So as an example, 5 that can be read as 00000101 in bynary is represented with
+ 3 empty bytes + 00000101 in NumPy
+ 3 int64 + 3 empty bytes + 00000101 in Lists
+ The difference in memory is huge!
*** Takeaway
+ NumPy is faster to read less bytes of memory
+ No type checking when interating through objects
+ NumPy also utilizes contiguous memory (not gonna explain it here)
*** The difference in utilzation
+ In Lists you can do Insertion, deletion, appending, concatenation, etc.

~a = [1,3,5]~
~b = [1,2,3]~
~a*b = ERROR~

+ In NumPy you can do Insertion, deletion, appending, concatenation, etc + Lost More

~a = np.array([1,3,5])~
~b = np.array([1,2,3])~
~a*b = np.array([1,6,15])~

** Applications
+ A MATLAB Replacement (maybe)
+ Plotting (Matplotlib)
+ Backend (Pandas, Connect 4, Digital Photography) -> Guess I will be learning it primarly for Pandas
+ Machine Learning -> Guess I will be learning it for this reason

* Some code I followed along with
#+BEGIN_SRC
#!/usr/bin/env python3

# Load in NumPy (remember to pip install numpy first)
import numpy as np

# The Basics
a = np.array([1,2,3], dtype='int16' )
print(a)
b = np.array([[9.0,8.0,7.0], [6.0,5.0,4.0]])
print(b)
# Get Dimension
print(a.ndim)
# Get Shape
print(b.shape)
# Get Type
print(a.dtype)
print(b.dtype)
# Get Size
print(a.itemsize)
print(b.itemsize)
# Get total size
print(a.size * a.itemsize) # or using:
print(a.nbytes)

#+END_SRC

#+BEGIN_SRC
#!/usr/bin/env python3

# Load in NumPy
import numpy as np


# Accessing/Changing specific elements, rows, columns, etc
a = np.array([[1,2,3,4,5,6,7], [8,9,10,11,12,13,14]])
print(a)

# Get a specific element [ r, c ]
print(a[1,5])
# Get a specific row
print(a[0, :])
# Get a specific collum
print(a[:, 2])
#Getting a little more fancy [startindex:endindex:stepsize]
print(a[0, 1:6:2])
#Changing an element
a[1,5] = 20
print(a)
#Changing a specific collum
a[:,2] = 5
print(a)
# 3-d example
b = np.array([[[1,2],[3,4]],[[5,6],[7,8]]])
print(b)
# Get specific element (work outside in)
print(b[0,1,1])
# Replace
b[:,1,:] = [[9,9],[8,8]]
print(b)
#+END_SRC

#+BEGIN_SRC
#!/usr/bin/env python3

import numpy as np

#All 0s matrix
print(np.zeros(5))
#or
print(np.zeros((2,3)))
#All 1s matrix
print(np.ones((4,2,2), dtype='int32'))
#Any other number
print(np.full((2,2) ,99))
# Any other number (full_like)
# Let's suppose you created this array bellow
a = np.array([1,2,3,4])
# Now you can create an array with any other number and use the same shape as your last array
print(np.full_like(a,4))
# Random decimal numbers
print(np.random.rand(4,2))
# Random Integer values
print(np.random.randint(-4,8, size=(3,3)))
# The Identity matrix
print(np.identity(5))
# Repeat array a few times
arr = np.array([[1,2,3]])
r1 = np.repeat(arr,3, axis=0)
print(r1)
#+END_SRC


#+BEGIN_SRC
#!/usr/bin/env python3

import numpy as np

# Initialize this 5x5 array (Idk, it is an image)
a = np.array([[1,1,1,1,1]])
b = np.array([[1,0,0,0,1]])
c = np.array([[1,0,9,0,1]])
r2 = np.repeat(b,1, axis=0)
r1 = np.repeat(a,1, axis=0)
print(a)
print(b)
print(c)
print(r2)
print(r1)

# The solution
print("\nNow the solution: \n")
output = np.ones((5,5))
#print(output)

z = np.zeros((3,3))
z[1,1] = 9
#print(z)

output[1:4,1:4] = z
print(output)
#+END_SRC


#+BEGIN_SRC
#!/usr/bin/env python3

import numpy as np

# Copy it like this
a = np.array([1,2,3])
b = a.copy()
b[0] = 100

print(a)
#+END_SRC

+ The rest are jupyter notebooks, which are very bad to paste here :(
* Resources
** Videos
+ [[https://www.youtube.com/watch?v=QUT1VHiLmmI][Python NumPy Tutorial for Beginners]]
+ Playlist: [[https://youtube.com/playlist?list=PLCC34OHNcOtpalASMlX2HHdsLNipyyhbK][Numpy For Machine Learning]]
